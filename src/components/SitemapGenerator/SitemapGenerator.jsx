import { useEffect, useState } from "react";
import { usePerPgaeMovieQuery } from "../../redux/features/movies/movieApi";
import IndexTable from "./IndexTable";

const SitemapGenerator = () => {
  const { data: perPgaeMovie } = usePerPgaeMovieQuery();
  const [urls, setUrls] = useState([]);
  console.log(perPgaeMovie);

  console.log(urls);

  useEffect(() => {
    const movieUrls = perPgaeMovie?.data?.data?.map(
      (movie) => `/movie/${movie.id}/${movie.post_title}`
    );

    const xmlData = `<?xml version="1.0" encoding="UTF-8"?>
    <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
      ${movieUrls
        ?.map(
          (url) => `
        <url>
          <loc>http://localhost:3000${url}</loc>
          <lastmod>${new Date().toISOString()}</lastmod>
          <changefreq>daily</changefreq>
          <priority>0.8</priority>
        </url>
      `
        )
        .join("")}
    </urlset>`;

    const parser = new DOMParser();
    const xmlDoc = parser.parseFromString(xmlData, "text/xml");
    const urlNodes = xmlDoc.getElementsByTagName("url");
    const parsedUrls = [];

    for (let i = 0; i < urlNodes.length; i++) {
      const loc = urlNodes[i].getElementsByTagName("loc")[0].textContent;
      const lastmod =
        urlNodes[i].getElementsByTagName("lastmod")[0].textContent;
      const changefreq =
        urlNodes[i].getElementsByTagName("changefreq")[0].textContent;
      const priority =
        urlNodes[i].getElementsByTagName("priority")[0].textContent;

      parsedUrls.push({ loc, lastmod, changefreq, priority });
    }

    setUrls(parsedUrls);
  }, [perPgaeMovie?.data?.data]);

  return (
    <div className="">
      <div className="w-full h-[200px] bg-slate-800">
        <div className="w-[80%] h-full mx-auto text-white flex flex-col justify-center">
          <h1 className="text-2xl">XML Sitemap</h1>
          <p className="text-sm mt-4">
            Generated by All in One SEO, this is an XML Sitemap, meant to be
            consumed by search engines like Google or Bing.
          </p>
          <p className="text-sm">
            You can find more information about XML Sitemaps at sitemaps.org.
          </p>
        </div>
      </div>
      <IndexTable urls={urls} />
    </div>
  );
};

export default SitemapGenerator;

//***************************  WEEKLY *************************

// import { useEffect, useState } from "react";
// import { usePerPgaeMovieQuery } from "../../redux/features/movies/movieApi";
// import IndexTable from "./IndexTable";

// const SitemapGenerator = () => {
//   const { data: perPgaeMovie } = usePerPgaeMovieQuery();
//   const [urls, setUrls] = useState([]);

//   useEffect(() => {
//     // Generate sitemap initially
//     generateSitemap();

//     // Set interval to generate sitemap weekly
//     const interval = setInterval(() => {
//       generateSitemap();
//     }, 86400); // 7 days in milliseconds

//     // Clean up interval on unmount
//     return () => clearInterval(interval);
//   }, []);

//   const generateSitemap = () => {
//     const movieUrls = perPgaeMovie?.data?.data?.map(
//       (movie) => `/movie/${movie.id}/${movie.post_title}`
//     );

//     const xmlData = `<?xml version="1.0" encoding="UTF-8"?>
//     <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
//       ${movieUrls
//         ?.map(
//           (url) => `
//         <url>
//           <loc>http://localhost:3000${url}/</loc>
//           <lastmod>${new Date().toISOString()}</lastmod>
//           <changefreq>weekly</changefreq>
//           <priority>0.8</priority>
//         </url>
//       `
//         )
//         .join("")}
//     </urlset>`;

//     const parser = new DOMParser();
//     const xmlDoc = parser.parseFromString(xmlData, "text/xml");
//     const urlNodes = xmlDoc.getElementsByTagName("url");
//     const parsedUrls = [];

//     for (let i = 0; i < urlNodes.length; i++) {
//       const loc = urlNodes[i].getElementsByTagName("loc")[0].textContent;
//       const lastmod =
//         urlNodes[i].getElementsByTagName("lastmod")[0].textContent;
//       const changefreq =
//         urlNodes[i].getElementsByTagName("changefreq")[0].textContent;
//       const priority =
//         urlNodes[i].getElementsByTagName("priority")[0].textContent;

//       parsedUrls.push({ loc, lastmod, changefreq, priority });
//     }

//     setUrls(parsedUrls);
//   };

//   return (
//     <div className="">
//       <IndexTable urls={urls} />
//     </div>
//   );
// };

// export default SitemapGenerator;

//***************************  ONCLICK GENRATE *************************

// import { useState } from "react";
// import { usePerPgaeMovieQuery } from "../../redux/features/movies/movieApi";
// import IndexTable from "./IndexTable";

// const SitemapGenerator = () => {
//   const { data: perPgaeMovie } = usePerPgaeMovieQuery();
//   const [urls, setUrls] = useState([]);

//   const generateSitemap = () => {
//     const movieUrls = perPgaeMovie?.data?.data?.map((movie) => `/movie/${movie.id}/${movie.post_title}`);

//     const xmlData = `<?xml version="1.0" encoding="UTF-8"?>
//     <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
//       ${movieUrls?.map(
//         (url) => `
//         <url>
//           <loc>http://localhost:3000${url}/</loc>
//           <lastmod>${new Date().toISOString()}</lastmod>
//           <changefreq>weekly</changefreq>
//           <priority>0.8</priority>
//         </url>
//       `
//       ).join("")}
//     </urlset>`;

//     const parser = new DOMParser();
//     const xmlDoc = parser.parseFromString(xmlData, 'text/xml');
//     const urlNodes = xmlDoc.getElementsByTagName('url');
//     const parsedUrls = [];

//     for (let i = 0; i < urlNodes.length; i++) {
//       const loc = urlNodes[i].getElementsByTagName('loc')[0].textContent;
//       const lastmod = urlNodes[i].getElementsByTagName('lastmod')[0].textContent;
//       const changefreq = urlNodes[i].getElementsByTagName('changefreq')[0].textContent;
//       const priority = urlNodes[i].getElementsByTagName('priority')[0].textContent;

//       parsedUrls.push({ loc, lastmod, changefreq, priority });
//     }

//     setUrls(parsedUrls);
//   };

//   return (
//     <div className="">
//       <button onClick={generateSitemap}>Generate Sitemap</button>
//       <IndexTable urls={urls}/>
//     </div>
//   );
// };

// export default SitemapGenerator;
